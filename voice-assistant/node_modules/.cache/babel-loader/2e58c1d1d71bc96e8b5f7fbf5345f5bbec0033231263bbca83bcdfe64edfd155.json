{"ast":null,"code":"// Type definition for speech recognition\n\n// Add to Window interface\n\n// Create and export the speech recognition instance\nexport function createSpeechRecognition() {\n  if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n    console.error('Speech recognition is not supported in this browser');\n    return null;\n  }\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = new SpeechRecognition();\n  recognition.continuous = false;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  return recognition;\n}","map":{"version":3,"names":["createSpeechRecognition","window","console","error","SpeechRecognition","webkitSpeechRecognition","recognition","continuous","interimResults","lang"],"sources":["/Users/incrediblevisibility/Desktop/FE/voice-assistant/src/utils/speechRecognition.ts"],"sourcesContent":["// Type definition for speech recognition\ninterface SpeechRecognition extends EventTarget {\n  continuous: boolean;\n  interimResults: boolean;\n  lang: string;\n  maxAlternatives: number;\n  onaudioend: ((this: SpeechRecognition, ev: Event) => any) | null;\n  onaudiostart: ((this: SpeechRecognition, ev: Event) => any) | null;\n  onend: ((this: SpeechRecognition, ev: Event) => any) | null;\n  onerror: ((this: SpeechRecognition, ev: Event) => any) | null;\n  onnomatch: ((this: SpeechRecognition, ev: Event) => any) | null;\n  onresult: ((this: SpeechRecognition, ev: SpeechRecognitionEvent) => any) | null;\n  onsoundend: ((this: SpeechRecognition, ev: Event) => any) | null;\n  onsoundstart: ((this: SpeechRecognition, ev: Event) => any) | null;\n  onspeechend: ((this: SpeechRecognition, ev: Event) => any) | null;\n  onspeechstart: ((this: SpeechRecognition, ev: Event) => any) | null;\n  onstart: ((this: SpeechRecognition, ev: Event) => any) | null;\n  start(): void;\n  stop(): void;\n  abort(): void;\n}\n\ninterface SpeechRecognitionEvent extends Event {\n  readonly resultIndex: number;\n  readonly results: SpeechRecognitionResultList;\n}\n\ninterface SpeechRecognitionResultList {\n  readonly length: number;\n  item(index: number): SpeechRecognitionResult;\n  [index: number]: SpeechRecognitionResult;\n}\n\ninterface SpeechRecognitionResult {\n  readonly isFinal: boolean;\n  readonly length: number;\n  item(index: number): SpeechRecognitionAlternative;\n  [index: number]: SpeechRecognitionAlternative;\n}\n\ninterface SpeechRecognitionAlternative {\n  readonly transcript: string;\n  readonly confidence: number;\n}\n\ninterface SpeechRecognitionConstructor {\n  new (): SpeechRecognition;\n  prototype: SpeechRecognition;\n}\n\n// Add to Window interface\ndeclare global {\n  interface Window {\n    SpeechRecognition: SpeechRecognitionConstructor;\n    webkitSpeechRecognition: SpeechRecognitionConstructor;\n  }\n}\n\n// Create and export the speech recognition instance\nexport function createSpeechRecognition(): SpeechRecognition | null {\n  if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n    console.error('Speech recognition is not supported in this browser');\n    return null;\n  }\n\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = new SpeechRecognition();\n  \n  recognition.continuous = false;\n  recognition.interimResults = true;\n  recognition.lang = 'en-US';\n  \n  return recognition;\n}"],"mappings":"AAAA;;AAkDA;;AAQA;AACA,OAAO,SAASA,uBAAuBA,CAAA,EAA6B;EAClE,IAAI,EAAE,yBAAyB,IAAIC,MAAM,CAAC,IAAI,EAAE,mBAAmB,IAAIA,MAAM,CAAC,EAAE;IAC9EC,OAAO,CAACC,KAAK,CAAC,qDAAqD,CAAC;IACpE,OAAO,IAAI;EACb;EAEA,MAAMC,iBAAiB,GAAGH,MAAM,CAACG,iBAAiB,IAAIH,MAAM,CAACI,uBAAuB;EACpF,MAAMC,WAAW,GAAG,IAAIF,iBAAiB,CAAC,CAAC;EAE3CE,WAAW,CAACC,UAAU,GAAG,KAAK;EAC9BD,WAAW,CAACE,cAAc,GAAG,IAAI;EACjCF,WAAW,CAACG,IAAI,GAAG,OAAO;EAE1B,OAAOH,WAAW;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}